#!/bin/bash

Compound=some_compound

#MolWt=30.0698

Model=some_model
iRef=some_iRef
input_path=some_input_path
output_path=some_output_path

N=400

#========Isochore Settings=====

   Tic0=(137 198.5)		#
   Tic1=(174 234.6)		#	 
   Tic2=(207 262.9)		# 			
   Tic3=(236 285.1)		# 			
   Tic4=(260 301.9)		# 			

rhoIC=(0.60000 0.55714 0.51429 0.47143 0.42857)

#Vbox(nm3) = N*MolWt/602.22/rho(g/cc)
#boxLen(nm) = Vbox^(1/3)

liquid_box=(3.2168 3.2973 3.3864 3.4861 3.5986) # 3.8765 4.2666 4.8841 6.1536) 

#for j in $(seq $j_start $j_end)

#do
#echo liquid_box{$[j] Tic$j[0} Tic$j[1} >> IsochoreSettings.txt
#done

#========End Isochore Settings=====

#jretemp 
j_start=0
#jretemp 
j_end=4


####

echo "NMol" "Length (nm)" "Temp (K)" > "$output_path"/ref"$iRef"/IsochoreSettings.txt

# Initialize the folders

for j in $(seq $j_start $j_end)

do

cd "$output_path"/ref"$iRef" || exit #presumes this dir was made during Isotherm simulation

#jretemp 
mkdir Isochore  
cd Isochore || exit

mkdir rho"$j"
cd    rho"$j" || exit

if [ "$j" -eq "0" ]; then Tic="${Tic0[@]}"; fi  
if [ "$j" -eq "1" ]; then Tic="${Tic1[@]}"; fi #JRE: Evidently, the @ assigns the address of Tic1 to Tic. This statement uses strings when numbers might work simpler.
if [ "$j" -eq "2" ]; then Tic="${Tic2[@]}"; fi  
if [ "$j" -eq "3" ]; then Tic="${Tic3[@]}"; fi  
if [ "$j" -eq "4" ]; then Tic="${Tic4[@]}"; fi  

t=-1  #do not put space after equal sign. 
for Temp in ${Tic} 
do
t=$((t+1))

echo "$N" "${liquid_box[j]}" "$Temp" >> "$output_path"/ref"$iRef"/IsochoreSettings.txt

cd "$output_path"/ref"$iRef"/Isochore/rho"$j" || exit  #start fresh for do cycle instead of multiple "cd .."'s

#jretemp 
mkdir T"$t"  #JRE: using generic "T1" and "T2" for folder names to facilitate later reading/post-processing.
cd    T"$t" || exit

#JRE: cd to here because later cycles may be way deep.
#cd "$output_path"/ref"$iRef"/Isochore/rho"$j"/T"$t" || exit
gmx insert-molecules -ci ../../../ethane.gro -nmol $N -box "${liquid_box[j]}" "${liquid_box[j]}" "${liquid_box[j]}" -o ethane_box.gro > insertout 2>> insertout

#Copy the minimization files

cp "$input_path"/em_steep.mdp em_steep.mdp
cp "$input_path"/em_l-bfgs.mdp em_l-bfgs.mdp

#jretemp 
mkdir NVT_eq
cd NVT_eq || exit

# Copy the equilibration files and edit the temperature

cp "$input_path"/nvt_eq.mdp nvt_eq.mdp
sed -i -e s/some_temperature/"$Temp"/ nvt_eq.mdp

#jretemp 
mkdir NVT_prod
cd NVT_prod || exit

# Copy the production files and edit the temperature

cp "$input_path"/nvt_prod.mdp nvt_prod.mdp
sed -i -e s/some_temperature/"$Temp"/ nvt_prod.mdp

cd .. #back to NVT_eq level
cd .. #back to Tic[t] level

# Energy minimization
gmx grompp -f em_steep.mdp -c ethane_box.gro -p ../../../ethane.top -o em_steep.tpr > gromppout 2>> gromppout
gmx mdrun -table ../../../tab_it.xvg -nt 1 -deffnm em_steep > runout 2>> runout &
sleep 10s

# Second run the em_l-bfgs
gmx grompp -f em_l-bfgs.mdp -c em_steep.gro -p ../../../ethane.top -o em_l_bfgs.tpr -maxwarn 1 >> gromppout 2>> gromppout
gmx mdrun -table ../../../tab_it.xvg -nt 1 -deffnm em_l_bfgs >> runout 2>> runout &
sleep 10s

# Equilibration period
cd NVT_eq
gmx grompp -f nvt_eq.mdp -c ../em_l_bfgs.gro -p ../../../../ethane.top -o nvt_eq.tpr > gromppout 2>> gromppout
gmx mdrun -table ../../../../tab_it.xvg -nt 4 -deffnm nvt_eq > runout 2>> runout &
sleep 5s
sleep 1m

# Production period
cd NVT_prod 
gmx grompp -f nvt_prod.mdp -c ../nvt_eq.gro -p ../../../../../ethane.top -o nvt_prod.tpr > gromppout 2>> gromppout
gmx mdrun -table ../../../../../tab_it.xvg -nt 1 -deffnm nvt_prod > runout 2>> runout & #Can use more cores in liquid phase since vapor phase will have already finished
#sleep 6m

done #for t

#sleep 11m

done #for j

echo "Waiting for isochore productions"

sleep 15m #Tabulated takes more than twice as long # Previously this was outside of script, but now performing some analysis inside script



# Loop back through to compute RDFs and ensemble averages

for j in $(seq $j_start $j_end)

do

if [ "$j" -eq "0" ]; then Tic="${Tic0[@]}"; fi  
if [ "$j" -eq "1" ]; then Tic="${Tic1[@]}"; fi #JRE: Evidently, the @ assigns the address of Tic1 to Tic. This statement uses strings when numbers might work simpler.
if [ "$j" -eq "2" ]; then Tic="${Tic2[@]}"; fi  
if [ "$j" -eq "3" ]; then Tic="${Tic3[@]}"; fi  
if [ "$j" -eq "4" ]; then Tic="${Tic4[@]}"; fi  

t=-1  #do not put space after equal sign. 
for Temp in ${Tic} 
do
t=$((t+1))

cd "$output_path"/ref"$iRef"/Isochore/rho"$j"/T"$t"/NVT_eq/NVT_prod || exit  #start fresh for do cycle instead of multiple "cd .."'s

#First perform the RDF tabulation
gmx rdf -f nvt_prod.trr -s nvt_prod.tpr -o nvt_prod_rdf.xvg -ref CHX -sel CHX -cut 0.2

#Then perform rerun of reference
cp "$input_path"/md_nocord.mdp md_nocord.mdp 

sed -i -e s/some_temperature/"$Temp"/ md_nocord.mdp #Temperature might not matter in rerun

gmx grompp -f md_nocord.mdp -p ../../../../../ethane.top -c nvt_prod.gro -o prod_ref"$iRef" -maxwarn 1 > gromppout 2>> gromppout 

gmx mdrun -table ../../../../../tab_it.xvg -nt 1 -rerun nvt_prod.trr -deffnm prod_ref"$iRef > rerunout 2>> rerunout & 

done #for t

done #for j

echo "Waiting for Isochore post processing to finish"

sleep 18s


### Analyze the rerun results

for j in $(seq $j_start $j_end)

do

if [ "$j" -eq "0" ]; then Tic="${Tic0[@]}"; fi  
if [ "$j" -eq "1" ]; then Tic="${Tic1[@]}"; fi 
if [ "$j" -eq "2" ]; then Tic="${Tic2[@]}"; fi  
if [ "$j" -eq "3" ]; then Tic="${Tic3[@]}"; fi  
if [ "$j" -eq "4" ]; then Tic="${Tic4[@]}"; fi  

t=-1  #do not put space after equal sign. 
for Temp in ${Tic} 
do
t=$((t+1))

cd "$output_path"/ref"$iRef"/Isochore/rho"$j"/T"$t"/NVT_eq/NVT_prod || exit

echo "1
2
4
8
10
0" | gmx energy -dp -f prod_ref"$iRef".edr -o energy_press_ref"$iRef".xvg > energyout 2>> energyout

rm -f \#*
rm -f prod_ref*.log
rm -f prod_ref*.tpr
rm -f prod_ref*.edr

done #for t

done #for j



exit 0

#######

